Перем КэшЗадач, КвоОбработано;


Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Параметры = "response_type=code" + "&";
	
	Параметры = Параметры + "client_id=588757912420-c2oupvmjtsq7k98rk4hmlpkvmun11l4k.apps.googleusercontent.com" + "&";
	Параметры = Параметры + "redirect_uri=urn:ietf:wg:oauth:2.0:oob" + "&";
	Параметры = Параметры + "access_type=offline" + "&";
	
	Параметры = Параметры + "scope=https://www.googleapis.com/auth/calendar";
 
 	
	АдресАвторизации = "https://accounts.google.com/o/oauth2/auth" + "?";
	
	ПолныйАдресАвторизации = АдресАвторизации + Параметры;
	
	ЭлементыФормы.Браузер.Перейти(ПолныйАдресАвторизации);
	
		
КонецПроцедуры

Процедура Этап2Нажатие(Код)
	
	//ХТТПЗАпрос = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	//
	//Скрипт = Новый COMОбъект("MSScriptControl.ScriptControl");
	// Скрипт.language = "javascript";
	//Скрипт.addObject("ХТТПЗАпрос", ХТТПЗАпрос);
	//Скрипт.Eval("ХТТПЗАпрос.option(4)=13056");
	//
	//ХТТПЗАпрос.Open("POST", "https://accounts.google.com/o/oauth2/token", 0);
	//ХТТПЗАпрос.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	//
	параметрыПОСТ = "grant_type=authorization_code" + "&";
	параметрыПОСТ = параметрыПОСТ + "code="+Код + "&";
 	параметрыПОСТ = параметрыПОСТ +  "client_id=588757912420-c2oupvmjtsq7k98rk4hmlpkvmun11l4k.apps.googleusercontent.com" + "&";
	параметрыПОСТ = параметрыПОСТ +  "client_secret=ZNh25_O4MpnUfm1J9kwUPBWl" + "&";
	параметрыПОСТ = параметрыПОСТ +  "redirect_uri=urn:ietf:wg:oauth:2.0:oob";
	//параметрыПОСТ = параметрыПОСТ +  "redirect_uri=http://localhost";

	//ХТТПЗАпрос.send(параметрыПОСТ);
	//
	//
	//ОтветСервера = ХТТПЗАпрос.responseText();
	//
	
	
		
	ЗащищенноеСоединение =  Новый ЗащищенноеСоединениеOpenSSL;
 	Соединение = Новый HTTPСоединение("accounts.google.com",443,,,,, ЗащищенноеСоединение);
 
	
	ХТТПЗАпрос = Новый HTTPЗапрос("/o/oauth2/token");
	
	ХТТПЗАпрос.Заголовки.Вставить("Content-Type",  "application/x-www-form-urlencoded");
	
	ХТТПЗАпрос.УстановитьТелоИзСтроки(параметрыПОСТ);
	
	HTTPОтвет = Соединение.ВызватьHTTPМетод("POST", ХТТПЗАпрос);
	
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда Возврат КонецЕсли;

	
	ОтветСервера =  HTTPОтвет.ПолучитьТелоКакСтроку();
 
	
	
 	ЧтениеJSON = новый ЧтениеJSON;
	
 	ЧтениеJSON.УстановитьСтроку(ОтветСервера);
	
	ДанныеАвторизации = ПрочитатьJSON(ЧтениеJSON);
	
 	ЧтениеJSON.Закрыть();
	
	Если ДанныеАвторизации.Свойство("access_token") Тогда
		ТокенДоступа = ДанныеАвторизации.access_token;
	КонецЕсли;
	
 	
	
 	
	
КонецПроцедуры

Процедура БраузерДокументСформирован(Элемент)
	
	
	ЗаголовокОкна = ЭлементыФормы.Браузер.Документ.nameProp;
	
	
	
	Если не ПустаяСтрока(ЗаголовокОкна) и лев(ЗаголовокОкна, 13)= "Success code=" Тогда
		
		КодАвторизации = Сред(ЗаголовокОкна, 14);
		
		Этап2Нажатие(КодАвторизации);
		
	КонецЕсли;
	
 	   
	
	
КонецПроцедуры

Процедура ПолучитьКалендариНажатие(Элемент)
	
	Календари.Очистить();
	
	
	//ХТТПЗАпрос = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	//
	//Скрипт = Новый COMОбъект("MSScriptControl.ScriptControl");
	// Скрипт.language = "javascript";
	//Скрипт.addObject("ХТТПЗАпрос", ХТТПЗАпрос);
	//Скрипт.Eval("ХТТПЗАпрос.option(4)=13056");
	//
	//ХТТПЗАпрос.Open("GET", "https://www.googleapis.com/calendar/v3/users/me/calendarList", 0);
	//ХТТПЗАпрос.setRequestHeader("Authorization", "Bearer "+СокрЛП(ТокенДоступа));
	//
	// ХТТПЗАпрос.send();
	//
	//
	//ОтветСервера = ХТТПЗАпрос.responseText();
	
	ЗащищенноеСоединение =  Новый ЗащищенноеСоединениеOpenSSL;
 	Соединение = Новый HTTPСоединение("www.googleapis.com",,,,,, ЗащищенноеСоединение);
 
	
	ХТТПЗАпрос = Новый HTTPЗапрос("/calendar/v3/users/me/calendarList");
	
	ХТТПЗАпрос.Заголовки.Вставить("Authorization",  "Bearer "+СокрЛП(ТокенДоступа));
	
	HTTPОтвет = Соединение.Получить(ХТТПЗАпрос);
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда Возврат КонецЕсли;
	
	ОтветСервера =  HTTPОтвет.ПолучитьТелоКакСтроку();
 	
 	
	ЧтениеJSON = новый ЧтениеJSON;
	
 	ЧтениеJSON.УстановитьСтроку(ОтветСервера);
	
	ДанныеКалендарей = ПрочитатьJSON(ЧтениеJSON);
	
 	ЧтениеJSON.Закрыть();
	
 	//ТокенДоступа = ДанныеАвторизации.access_token;
	
	
	Для каждого Календарь Из ДанныеКалендарей.Items Цикл
		
		НовСтр = Календари.Добавить();
		
		НовСтр.ид  = Календарь.id;
		НовСтр.Имя = Календарь.summary;
		
	КонецЦикла;

	
	
КонецПроцедуры

Процедура СобытияНажатие(Элемент)
	
	
	КвоОбработано = 0;
 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задача.Ссылка КАК Ссылка,
		|	Задача.идЗадачи КАК идЗадачи
		|ИЗ
		|	Документ.VIP2_Задача КАК Задача
		|ГДЕ
		|	Задача.идЗадачи <> """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КэшЗадач.Вставить(ВыборкаДетальныеЗаписи.идЗадачи, ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
  
	
	
	Для Каждого Кал из Календари Цикл
		
		Если Кал.Фл Тогда
			
			//   		ХТТПЗАпрос = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
			//   		
			//   		Скрипт = Новый COMОбъект("MSScriptControl.ScriptControl");
			//   		Скрипт.language = "javascript";
			//   		Скрипт.addObject("ХТТПЗАпрос", ХТТПЗАпрос);
			//   		Скрипт.Eval("ХТТПЗАпрос.option(4)=13056");
			//   		
			//   		
			//timeMin=2017-03-01T00:00:00.000Z
			СтрокаЗапроса =  "/calendar/v3/calendars/"+СокрЛП(Кал.ИД)+"/events"+"?timeMin=%1";
 			СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, "%1", Формат(НачалоПериода, "ДФ=yyyy-MM-dd'T'ЧЧ:мм:сс'.00Z'") );
			
			
			//   		ХТТПЗАпрос.Open("GET", СтрокаЗапроса, 0);
			//   		ХТТПЗАпрос.setRequestHeader("Authorization", "Bearer "+СокрЛП(ТокенДоступа));
			//			
			//   		ХТТПЗАпрос.send();
			//   		
			//			ОтветСервера = ХТТПЗАпрос.responseText();
			
			
			ЗащищенноеСоединение =  Новый ЗащищенноеСоединениеOpenSSL;
			Соединение = Новый HTTPСоединение("www.googleapis.com",443,,,,, ЗащищенноеСоединение);
			
			
			ХТТПЗАпрос = Новый HTTPЗапрос(СтрокаЗапроса);
			
			ХТТПЗАпрос.Заголовки.Вставить("Authorization",  "Bearer "+СокрЛП(ТокенДоступа));
			
			HTTPОтвет = Соединение.Получить(ХТТПЗАпрос);
			
			Если HTTPОтвет.КодСостояния <> 200 Тогда Возврат КонецЕсли;

 			ОтветСервера =  HTTPОтвет.ПолучитьТелоКакСтроку();
 
			
			//Сообщить(ОтветСервера);
			
			ЧтениеJSON = новый ЧтениеJSON;
			
			ЧтениеJSON.УстановитьСтроку(ОтветСервера);
			
			ДанныеСобытий = ПрочитатьJSON(ЧтениеJSON);
			
			ЧтениеJSON.Закрыть();
			
			Если ДанныеСобытий.Свойство("Items") Тогда
  			
				
				Для каждого EventItem Из ДанныеСобытий.Items  Цикл
					
					Если EventItem.Свойство("summary") Тогда
						
						ЗаголовокЗадачи = EventItem.summary;
						
						Если Лев(ЗаголовокЗадачи, 1)= "#" Тогда //это задача
							//Сообщить(ЗаголовокЗадачи);	
							СоздатьОбновитьЗадачу(ЗаголовокЗадачи, EventItem)
						КонецЕсли;
						
					КонецЕсли; //Если Итем.Свойство("summary")
					
				КонецЦикла; //Для каждого Итем Из ДанныеСобытий.Items 
				
			иначе
				
				Сообщить("Ошибка!");  Возврат;
				
			КонецЕсли; // Если ДанныеСобытий.Свойство("Items") Тогда
 			
			
		КонецЕсли;  //	Если Кал.Фл Тогда

		
	КонецЦикла;   //Для Каждого Кал По Календари Цикл
	
	Сообщить("Обработано "+ КвоОбработано +" задачи(а).");

	
КонецПроцедуры

//Параметры:
// - ОписаниеВКалендаре - строка как написана в календаре
// - EventItem - структура события в календаре
// - EventItem.start.dateTime - строка
// - EventItem.end.dateTime  - строка
// - EventItem.id - строка
// - EventItem.creator.self - булево
 Процедура СоздатьОбновитьЗадачу(ОписаниеВКалендаре, EventItem)
	
	 
	 КвоОбработано = КвоОбработано + 1;
	 
	 ПозицияМаркера = Найти(ОписаниеВКалендаре, ":");
	 
	 Если ПозицияМаркера = 0  Тогда
	 	ПозицияМаркера = Найти(ОписаниеВКалендаре, "-");
	 КонецЕсли;
	 
	 ИдЗадачи = Сокрлп(Сред(ОписаниеВКалендаре, 1, ПозицияМаркера-1));
		
		Если не ПустаяСтрока(ИдЗадачи) Тогда
			
			//Исполнитель = Справочники.Пользователи.НайтиПоРеквизиту("eMail", EventItem.creator.email);
			
			Исполнитель = Пользователи.ТекущийПользователь();
		
			ЗадачаСсылка = КэшЗадач.Получить(ИдЗадачи);
			
						
			Если ЗадачаСсылка = Неопределено Тогда
				
				НовЗадача = Документы.VIP2_Задача.СоздатьДокумент();

				
				ДатаНачала = Лев(EventItem.start.dateTime, 16);
				ДатаНачала = ПолучитьДатуИзСтроки(ДатаНачала);

				
				НовЗадача = Документы.VIP2_Задача.СоздатьДокумент();
				НовЗадача.Дата =  ДатаНачала;
				НовЗадача.идЗадачи = ИдЗадачи;
				НовЗадача.ОписаниеЗадачи = ОписаниеВКалендаре;
				
				Если EventItem.Свойство("description")  Тогда
					НовЗадача.ОписаниеЗадачи = EventItem.description;
				КонецЕсли;
				
				НовЗадача.ТемаЗадачи =  ОписаниеВКалендаре;
				НовЗадача.Исполнитель = Исполнитель;
				
				Попытка
					НовЗадача.Записать(РежимЗаписиДокумента.Запись);
					КэшЗадач.Вставить(ИдЗадачи, НовЗадача.Ссылка);
				Исключение
				    Сообщить(ОписаниеОшибки());
				КонецПопытки;

				
				
			иначе //Если ЗадачаСсылка = Неопределено Тогда
				
				НовЗадача = ЗадачаСсылка.ПолучитьОбъект();
				
				Если НовЗадача.Проведен Тогда
					Попытка
						НовЗадача.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
					
				КонецЕсли;
				
				
			КонецЕсли; //Если ЗадачаСсылка = Неопределено Тогда
			
			
			ТЧОбсуждение = НовЗадача.Обсуждения;
			
			СтрокаТЧ = ТЧОбсуждение.Найти(EventItem.id, "идСобытия");
			
							
				ДатаНачала = Лев(EventItem.start.dateTime, 16);
				ДатаНачала = ПолучитьДатуИзСтроки(ДатаНачала);
				
				ДатаОкончания = Лев(EventItem.end.dateTime, 16);
				ДатаОкончания = ПолучитьДатуИзСтроки(ДатаОкончания);

				
				Если СтрокаТЧ = Неопределено Тогда
 					НоваяСтр = ТЧОбсуждение.Добавить();
 				иначе	
					НоваяСтр = 	СтрокаТЧ;
				КонецЕсли;
				
				НоваяСтр.ДатаНачала = ДатаНачала;
				НоваяСтр.ДатаОкончания =ДатаОкончания;
				НоваяСтр.Описание = СтрЗаменить(ОписаниеВКалендаре, ИдЗадачи,"");
				НоваяСтр.идСобытия = EventItem.id;
				НоваяСтр.Автор = Исполнитель;
				
				Если EventItem.Свойство("description")  Тогда
					НоваяСтр.Описание = EventItem.description;
				КонецЕсли;

				НовЗадача.Состояние = Справочники.VIP2_СостояниеЗаданий.НайтиПоНаименованию("В работе");
				
				НоваяСтр.Часы = (НоваяСтр.ДатаОкончания - НоваяСтр.ДатаНачала)  / 3600;

				Попытка
					НовЗадача.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;

				
			
			
			
			
		КонецЕсли; //Если не ПустаяСтрока(ИдЗадачи) Тогда
		
		
		
		
 	
		
	
	
КонецПроцедуры





Функция ПолучитьДатуИзСтроки(Стр)
    Д = Дата("00010101000000");
    Если ПустаяСтрока(Стр) Тогда
        Возврат Д;
	КонецЕсли;
	
	 //Ситис Вирич П.В.   Начало 2017-03-06
 	Если Найти(Стр,"T")>0 Тогда // формат datetime
		Стр = СтрЗаменить(Стр, "T", "-");
		Стр = СтрЗаменить(Стр, ":", "-");
	КонецЕсли; //Ситис Вирич П.В.   Конец 2017-03-06 

    Если Найти(Стр,".")>0 Тогда

        Если Найти(Стр,":")>0 И Найти(Стр," ")>0 Тогда
            М = РазложитьСтрокуВМассивПодстрок(Стр," ");
            Возврат ПолучитьДатуИзСтроки(М[0]);
        КонецЕсли;
        М = РазложитьСтрокуВМассивПодстрок(Стр, ".");
    ИначеЕсли Найти(Стр,"/")>0 Тогда
        М = РазложитьСтрокуВМассивПодстрок(Стр,"/");
    ИначеЕсли Найти(Стр,",")>0 Тогда
        М = РазложитьСтрокуВМассивПодстрок(Стр,",");
    ИначеЕсли Найти(Стр,"-")>0 Тогда
        М = РазложитьСтрокуВМассивПодстрок(Стр,"-");
    КонецЕсли;

    Попытка
        Если М.Количество()=3 Тогда //"01.02.13" или "01.02.2013"
            Год = ?(СтрДлина(М[2])=2,2000+М[2],М[2]);
            Д = Дата(Год,М[1],М[0]);
        ИначеЕсли М.Количество()=2 Тогда //"02.13" или "02.2013";
            Год = ?(СтрДлина(М[1])=2,2000+М[1],М[1]);
            Д = Дата(Год,М[0],1);
		 //Ситис Вирич П.В.   Начало 2017-03-06
		 ИначеЕсли М.Количество()=5 Тогда // формат datetime
			 Год = ?(СтрДлина(М[0])=2,2000+М[0],М[0]);
			 Д = Дата(Год, М[1], М[2], М[3], М[4], 0);
 			 //Ситис Вирич П.В.   Конец 2017-03-06 
			
        КонецЕсли;
    Исключение
    КонецПопытки;

    Возврат Д;
КонецФункции

// Функция "расщепляет" строку на подстроки, используя заданный
//        разделитель. Разделитель может иметь любую длину.
//        Если в качестве разделителя задан пробел, рядом стоящие пробелы
//        считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//        игнорируются.
//        Например,
//        РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов,
//        три из которых - пустые строки, а
//        РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//    Параметры:
//        Стр -             строка, которую необходимо разложить на подстроки.
//                        Параметр передается по значению.
//        Разделитель -     строка-разделитель, по умолчанию - запятая.
//
//
//    Возвращаемое значение:
//        массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт

    МассивСтрок = Новый Массив();
    Если Разделитель = " " Тогда
        Стр = СокрЛП(Стр);
        Пока Истина Цикл
            Поз = Найти(Стр,Разделитель);
            Если Поз=0 Тогда
                МассивСтрок.Добавить(Стр);
                Возврат МассивСтрок;
            КонецЕсли;
            МассивСтрок.Добавить(Лев(Стр,Поз-1));
            Стр = СокрЛ(Сред(Стр,Поз));
        КонецЦикла;
    Иначе
        ДлинаРазделителя = СтрДлина(Разделитель);
        Пока Истина Цикл
            Поз = Найти(Стр,Разделитель);
            Если Поз=0 Тогда
                МассивСтрок.Добавить(Стр);
                Возврат МассивСтрок;
            КонецЕсли;
            МассивСтрок.Добавить(Лев(Стр,Поз-1));
            Стр = Сред(Стр,Поз+ДлинаРазделителя);
        КонецЦикла;
    КонецЕсли;

КонецФункции
 
КэшЗадач = новый Соответствие; КвоОбработано =0;